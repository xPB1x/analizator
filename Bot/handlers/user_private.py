from aiogram import types, Router, F
from aiogram.filters import CommandStart, Command, or_f, StateFilter
from aiogram.fsm.context import FSMContext

import requests
import asyncio
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from splits.splits_sportorg import SplitSportorg
from splits.splits_winorient import SplitsWinOrient

from Bot.kbds import reply
from Bot.states.split_states import SplitStates

user_private_router = Router()


@user_private_router.message(or_f(CommandStart(), F.text.lower() == '—Å—Ç–∞—Ä—Ç'))
async def start_cmd(message: types.Message, state: FSMContext):
    await message.answer('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—éüëã\n–ù–∞—á–Ω—ë–º –∞–Ω–∞–ª–∏–∑?)', reply_markup=reply.start_kb)
    await state.clear()


@user_private_router.message(or_f(Command('help'), (F.text.lower() == '–ø–æ–º–æ—â—å')))
async def help(message: types.Message):
    await message.answer('–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–º–æ—â—å –Ω—É–∂–Ω–∞ –º–Ω–µ')


@user_private_router.message(F.text.lower().contains('–∞–Ω–∞–ª–∏–∑'))
async def analiz(message: types.Message, state: FSMContext):
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–ø–ª–∏—Ç—ãüèÉ‚Äç‚ôÇÔ∏èüìäüîó', reply_markup=reply.del_kb)
    await state.set_state(SplitStates.waiting_for_url)

@user_private_router.message(SplitStates.waiting_for_url)
async def choose_program(message: types.Message, state: FSMContext):
    url = message.text.strip()
    await state.update_data(url=url)
    await message.answer('üëá–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É —Å–ø–ª–∏—Ç–æ–≤üìäüìÇüèÉ‚Äç‚ôÄÔ∏è', reply_markup=reply.analiz_kb)
    await state.set_state(SplitStates.waiting_for_program)


@user_private_router.message(SplitStates.waiting_for_program, F.text.lower().contains('winorient'))
async def winorient(message: types.Message, state: FSMContext):
    await message.answer('–û–∂–∏–¥–∞–π—Ç–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–ª–∏—Ç–æ–≤ WinOrientüîÑüì¶', reply_markup=reply.del_kb)

    data = await state.get_data()
    url = data['url']
    try:
        response = requests.get(url)
        await state.set_state(SplitStates.waiting_for_type_distance)
        await state.update_data(program='winorient')
        await state.update_data(response=response)

        await message.answer('‚úÖ–°–ø–ª–∏—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã‚úÖ')
        await message.answer('üëá–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏', reply_markup=reply.types_kb)
    except Exception:
        await message.answer('‚ùå–ù–µ–≤–µ—Ä–Ω—ã–π url –∞–¥—Ä–µ—Å—Å‚ùå')


@user_private_router.message(SplitStates.waiting_for_program, F.text.lower().contains('sportorg'))
async def sportorg(message: types.Message, state: FSMContext):
    await message.answer('–û–∂–∏–¥–∞–π—Ç–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–ª–∏—Ç–æ–≤ SportOrgüîÑüì¶\n(–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–∂–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –¥–æ 1 –º–∏–Ω—É—Ç—ã)', reply_markup=reply.del_kb)
    await state.set_state(SplitStates.waiting_for_type_distance)
    await state.update_data(program='sportorg')

    data = await state.get_data()
    url = data['url']
    options = Options()
    options.add_argument('--headless')
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')
    try:
        with webdriver.Chrome(options=options) as browser:
            browser.get(url)

            await asyncio.sleep(1)

            browser.find_element(By.CSS_SELECTOR, 'div.sportorg-settings-row > button').click()
            labels = browser.find_elements(By.CSS_SELECTOR, 'div.sportorg-settings-row')
            for label in labels:
                if label.text.strip() == '–°–ø–ª–∏—Ç—ã (–≤—Å–µ –æ—Ç–º–µ—Ç–∫–∏)':
                    label.click()
                    break

            html = browser.page_source
            splits = SplitSportorg(html)
            await state.update_data(splits=splits)

            await message.answer('‚úÖ–°–ø–ª–∏—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã‚úÖ', reply_markup=reply.types_kb)
            await message.answer('üëá–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏', reply_markup=reply.types_kb)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer('‚ùå–ù–µ–≤–µ—Ä–Ω—ã–π URL –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ‚ùå')



@user_private_router.message(SplitStates.waiting_for_program, F.text.lower().contains('sfr'))
async def sfr(message: types.Message, state: FSMContext):
    await message.answer('–û–∂–∏–¥–∞–π—Ç–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–ª–∏—Ç–æ–≤ SFR', reply_markup=reply.del_kb)

    data = await state.get_data()
    url = data['url']
    try:
        response = requests.get(url)
        await state.set_state(SplitStates.waiting_for_type_distance)
        await state.update_data(program='sfr')
        await state.update_data(response=response)

        await message.answer('‚úÖ–°–ø–ª–∏—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã‚úÖ')
        await message.answer('üëá–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏', reply_markup=reply.types_kb)
    except Exception:
        await message.answer('‚ùå–ù–µ–≤–µ—Ä–Ω—ã–π url –∞–¥—Ä–µ—Å—Å‚ùå')


@user_private_router.message(SplitStates.waiting_for_program)
async def unknown_program(message: types.Message):
    await message.answer('üò§–¢–∞–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å–ø–ª–∏—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞üò§\nüëá–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Öüëá')


@user_private_router.message(SplitStates.waiting_for_type_distance)
async def type_distance(message: types.Message, state: FSMContext):
    type_distance = message.text
    if type_distance not in {'–ó–∞–¥–∞–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–û–±—â–∏–π —Å—Ç–∞—Ä—Ç', '–≠—Å—Ç–∞—Ñ–µ—Ç–∞', '–í—ã–±–æ—Ä'}:
        await state.set_state(SplitStates.waiting_for_program)
        await message.answer('–ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–∏–ø –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏üòë\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö‚ùó‚ùó‚ùó', reply_markup=reply.analiz_kb)
    else:
        await state.update_data(type_distance=type_distance)
        data = await state.get_data()
        program = data['program']
        if program == 'winorient':
            await state.set_state(SplitStates.winorient_splits)
            await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—åüëÄ', reply_markup=reply.del_kb)
        elif program == 'sportorg':
            await state.set_state(SplitStates.sportorg_splits)
            await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—åüëÄ', reply_markup=reply.del_kb)
        elif program == 'sfr':
            await state.set_state(SplitStates.sfr_splits)
            await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—åüëÄ', reply_markup=reply.del_kb)